<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[bezierEasingMixin被禁用问题的解决]]></title>
    <url>%2F2018%2F09%2F28%2FbezierEasingMixin%E8%A2%AB%E7%A6%81%E7%94%A8%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%2F</url>
    <content type="text"><![CDATA[在 node_modules\@angular-devkit\build-angular\src\angular-cli-files\models\webpack-configs\styles.js line 136和142行（由于版本不一样文件的位置也不一样），lessPathOptions这个对象，加入属性lessPathOptions.javascriptEnabled = true。 1234567let lessPathOptions = &#123; paths: [], javascriptEnabled: true&#125;; if (......); lessPathOptions = &#123; paths: includePaths, javascriptEnabled: true &#125;; &#125;]]></content>
      <tags>
        <tag>Angular, LESS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[logback 配置]]></title>
    <url>%2F2018%2F09%2F28%2Flogback-%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[摘抄： https://juejin.im/post/5a1f86f0f265da4326529c61 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;configuration&gt; &lt;!-- 日志根目录--&gt; &lt;springProperty scope=&quot;context&quot; name=&quot;LOG_HOME&quot; source=&quot;logging.path&quot; defaultValue=&quot;/data/logs/spring-boot-logback&quot;/&gt; &lt;!-- 日志级别 --&gt; &lt;springProperty scope=&quot;context&quot; name=&quot;LOG_ROOT_LEVEL&quot; source=&quot;logging.level.root&quot; defaultValue=&quot;DEBUG&quot;/&gt; &lt;!-- 标识这个&quot;STDOUT&quot; 将会添加到这个logger --&gt; &lt;springProperty scope=&quot;context&quot; name=&quot;STDOUT&quot; source=&quot;log.stdout&quot; defaultValue=&quot;STDOUT&quot;/&gt; &lt;!-- 日志文件名称--&gt; &lt;property name=&quot;LOG_PREFIX&quot; value=&quot;spring-boot-logback&quot; /&gt; &lt;!-- 日志文件编码--&gt; &lt;property name=&quot;LOG_CHARSET&quot; value=&quot;UTF-8&quot; /&gt; &lt;!-- 日志文件路径+日期--&gt; &lt;property name=&quot;LOG_DIR&quot; value=&quot;$&#123;LOG_HOME&#125;/%d&#123;yyyyMMdd&#125;&quot; /&gt; &lt;!--对日志进行格式化--&gt; &lt;property name=&quot;LOG_MSG&quot; value=&quot;- | [%X&#123;requestUUID&#125;] | [%d&#123;yyyyMMdd HH:mm:ss.SSS&#125;] | [%level] | [$&#123;HOSTNAME&#125;] | [%thread] | [%logger&#123;36&#125;] | --&gt; %msg|%n &quot;/&gt; &lt;!--文件大小，默认10MB--&gt; &lt;property name=&quot;MAX_FILE_SIZE&quot; value=&quot;50MB&quot; /&gt; &lt;!-- 配置日志的滚动时间 ，表示只保留最近 10 天的日志--&gt; &lt;property name=&quot;MAX_HISTORY&quot; value=&quot;10&quot;/&gt; &lt;!--输出到控制台--&gt; &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt; &lt;!-- 输出的日志内容格式化--&gt; &lt;layout class=&quot;ch.qos.logback.classic.PatternLayout&quot;&gt; &lt;pattern&gt;$&#123;LOG_MSG&#125;&lt;/pattern&gt; &lt;/layout&gt; &lt;/appender&gt; &lt;!--输出到文件--&gt; &lt;appender name=&quot;0&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt; &lt;/appender&gt; &lt;!-- 定义 ALL 日志的输出方式:--&gt; &lt;appender name=&quot;FILE_ALL&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt; &lt;!--日志文件路径，日志文件名称--&gt; &lt;File&gt;$&#123;LOG_HOME&#125;/all_$&#123;LOG_PREFIX&#125;.log&lt;/File&gt; &lt;!-- 设置滚动策略，当天的日志大小超过 $&#123;MAX_FILE_SIZE&#125; 文件大小时候，新的内容写入新的文件， 默认10MB --&gt; &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt; &lt;!--日志文件路径，新的 ALL 日志文件名称，“ i ” 是个变量 --&gt; &lt;FileNamePattern&gt;$&#123;LOG_DIR&#125;/all_$&#123;LOG_PREFIX&#125;%i.log&lt;/FileNamePattern&gt; &lt;!-- 配置日志的滚动时间 ，表示只保留最近 10 天的日志--&gt; &lt;MaxHistory&gt;$&#123;MAX_HISTORY&#125;&lt;/MaxHistory&gt; &lt;!--当天的日志大小超过 $&#123;MAX_FILE_SIZE&#125; 文件大小时候，新的内容写入新的文件， 默认10MB--&gt; &lt;timeBasedFileNamingAndTriggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt; &lt;maxFileSize&gt;$&#123;MAX_FILE_SIZE&#125;&lt;/maxFileSize&gt; &lt;/timeBasedFileNamingAndTriggeringPolicy&gt; &lt;/rollingPolicy&gt; &lt;!-- 输出的日志内容格式化--&gt; &lt;layout class=&quot;ch.qos.logback.classic.PatternLayout&quot;&gt; &lt;pattern&gt;$&#123;LOG_MSG&#125;&lt;/pattern&gt; &lt;/layout&gt; &lt;/appender&gt; &lt;!-- 定义 ERROR 日志的输出方式:--&gt; &lt;appender name=&quot;FILE_ERROR&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt; &lt;!-- 下面为配置只输出error级别的日志 --&gt; &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt; &lt;level&gt;ERROR&lt;/level&gt; &lt;OnMismatch&gt;DENY&lt;/OnMismatch&gt; &lt;OnMatch&gt;ACCEPT&lt;/OnMatch&gt; &lt;/filter&gt; &lt;!--日志文件路径，日志文件名称--&gt; &lt;File&gt;$&#123;LOG_HOME&#125;/err_$&#123;LOG_PREFIX&#125;.log&lt;/File&gt; &lt;!-- 设置滚动策略，当天的日志大小超过 $&#123;MAX_FILE_SIZE&#125; 文件大小时候，新的内容写入新的文件， 默认10MB --&gt; &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt; &lt;!--日志文件路径，新的 ERR 日志文件名称，“ i ” 是个变量 --&gt; &lt;FileNamePattern&gt;$&#123;LOG_DIR&#125;/err_$&#123;LOG_PREFIX&#125;%i.log&lt;/FileNamePattern&gt; &lt;!-- 配置日志的滚动时间 ，表示只保留最近 10 天的日志--&gt; &lt;MaxHistory&gt;$&#123;MAX_HISTORY&#125;&lt;/MaxHistory&gt; &lt;!--当天的日志大小超过 $&#123;MAX_FILE_SIZE&#125; 文件大小时候，新的内容写入新的文件， 默认10MB--&gt; &lt;timeBasedFileNamingAndTriggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt; &lt;maxFileSize&gt;$&#123;MAX_FILE_SIZE&#125;&lt;/maxFileSize&gt; &lt;/timeBasedFileNamingAndTriggeringPolicy&gt; &lt;/rollingPolicy&gt; &lt;!-- 输出的日志内容格式化--&gt; &lt;layout class=&quot;ch.qos.logback.classic.PatternLayout&quot;&gt; &lt;Pattern&gt;$&#123;LOG_MSG&#125;&lt;/Pattern&gt; &lt;/layout&gt; &lt;/appender&gt; &lt;!-- additivity 设为false,则logger内容不附加至root ，配置以配置包下的所有类的日志的打印，级别是 ERROR--&gt; &lt;logger name=&quot;org.springframework&quot; level=&quot;ERROR&quot; /&gt; &lt;logger name=&quot;org.apache.commons&quot; level=&quot;ERROR&quot; /&gt; &lt;logger name=&quot;org.apache.zookeeper&quot; level=&quot;ERROR&quot; /&gt; &lt;logger name=&quot;com.alibaba.dubbo.monitor&quot; level=&quot;ERROR&quot;/&gt; &lt;logger name=&quot;com.alibaba.dubbo.remoting&quot; level=&quot;ERROR&quot; /&gt; &lt;!-- $&#123;LOG_ROOT_LEVEL&#125; 日志级别 --&gt; &lt;root level=&quot;$&#123;LOG_ROOT_LEVEL&#125;&quot;&gt; &lt;!-- 标识这个&quot;$&#123;STDOUT&#125;&quot;将会添加到这个logger --&gt; &lt;appender-ref ref=&quot;$&#123;STDOUT&#125;&quot;/&gt; &lt;!-- FILE_ALL 日志输出添加到 logger --&gt; &lt;appender-ref ref=&quot;FILE_ALL&quot;/&gt; &lt;!-- FILE_ERROR 日志输出添加到 logger --&gt; &lt;appender-ref ref=&quot;FILE_ERROR&quot;/&gt; &lt;/root&gt;&lt;/configuration&gt;]]></content>
      <tags>
        <tag>Spring boot, logback</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu服务器 node服务器基本配置]]></title>
    <url>%2F2017%2F11%2F06%2FUbuntu%E6%9C%8D%E5%8A%A1%E5%99%A8-node%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[〇 查看ubuntu的版本执行命令：12345cat /proc/version # 查看内核版本uname -a # 查看内核版本cat /etc/issue # 方法一lsb_release -a # 方法二cat /etc/lsb-release # 方法三 node环境安装 执行以下命令： 1curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash - 然后执行: 1apt-get install nodejs pm2安装pm2和forever是启动Nodejs服务常用到的两个工具。使用这两个指令可以使node服务在后台运行，另外它们可以在服务因异常或其他原因被杀掉后进行自动重启。当前项目选用pm2。1npm install -g pm2 MongoDB的安装 导入公钥 1sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 0C49F3730359A14518585931BC711F9BA15703C6 创建list文件：12.04系统下： 1echo "deb [ arch=amd64 ] http://repo.mongodb.org/apt/ubuntu precise/mongodb-org/3.4 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list 14.04系统下 1echo "deb [ arch=amd64 ] http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.4 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list 16.04系统下 1echo "deb [ arch=amd64,arm64 ] http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.4 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list 更新本地包的数据 1sudo apt-get update 最后执行命令进行安装 1sudo apt-get install -y mongodb-org 启动mongod服务 1sudo service mongod start Redis的安装 下载解压文件 1234wget http://download.redis.io/redis-stable.tar.gztar xvzf redis-stable.tar.gzcd redis-stablemake 将运行文件安装到 /usr/bin 1make install 创建配置文件夹和数据文件夹 12sudo mkdir /etc/redissudo mkdir /var/redis 将编译目录下的脚本拷贝到init.d文件夹下 1sudo cp utils/redis_init_script /etc/init.d/redis_6379 拷贝配置文件 1sudo cp redis.conf /etc/redis/6379.conf 为redis创建一个数据和工作目录 1sudo mkdir /var/redis/6379 编辑/etc/redis/6379.conf 把参数 daemonize 设置为 yes (默认是 no). 设置 pidfile 为 /var/run/redis_6379.pid (可以根据需要改变端口). 如果有需要可以改变 port 参数. 默认6379. 设置 loglevel 参数为合适值. 设置 logfile 为 /var/log/redis_6379.log 设置 dir 为 /var/redis/6379 (此步骤很重要!) 执行命令： 1sudo update-rc.d redis_6379 defaults 启动程序 1sudo /etc/init.d/redis_6379 start]]></content>
  </entry>
  <entry>
    <title><![CDATA[CentOS环境 node服务器基本配置]]></title>
    <url>%2F2017%2F11%2F06%2FCentOS%E7%8E%AF%E5%A2%83-node%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[node环境安装 执行以下命令： 1curl --silent --location https://rpm.nodesource.com/setup_6.x | bash - 然后执行: 1yum -y install nodejs pm2安装pm2和forever是启动Nodejs服务常用到的两个工具。使用这两个指令可以使node服务在后台运行，另外它们可以在服务因异常或其他原因被杀掉后进行自动重启。当前项目选用pm2。1npm install -g pm2 MongoDB的安装首先配置yum 1vi /etc/yum.repos.d/mongodb-org-3.0.repo 然后填入内容: 123456[mongodb-org-3.4]name=MongoDB Repositorybaseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.4/x86_64/gpgcheck=1enabled=1gpgkey=https://www.mongodb.org/static/pgp/server-3.4.asc 最后执行命令进行安装 1yum -y install mongodb-org 手动创建数据文件夹 1mkdir -p /data/db 启动mongod服务 1service mongod start Redis的安装首先检查环境123yum install -y gcc-c++yum install -y tclyum install -y wget 下载redis文件1wget http://download.redis.io/releases/redis-3.2.6.tar.gz 解压并编译123tar xzf redis-3.2.6.tar.gzcd redis-3.2.6make 如果出现错误 jemalloc/jemalloc.h: No such file or directory,则使用下面命令： 1make MALLOC=libc 将编译后的redis-server复制到/usr/bin 1cp src/redis-server /usr/bin/ 创建配置文件夹和数据文件夹12sudo mkdir /etc/redissudo mkdir /var/redis 将编译目录下的脚本拷贝到init.d文件夹下1sudo cp utils/redis_init_script /etc/init.d/redis_6379 拷贝配置文件1sudo cp redis.conf /etc/redis/6379.conf 为redis创建一个数据和工作目录1sudo mkdir /var/redis/6379 编辑/etc/redis/6379.conf 把参数 daemonize 设置为 yes (默认是 no). 设置 pidfile 为 /var/run/redis_6379.pid (可以根据需要改变端口). 如果有需要可以改变 port 参数. 默认6379. 设置 loglevel 参数为合适值. 设置 logfile 为 /var/log/redis_6379.log 设置 dir 为 /var/redis/6379 (此步骤很重要!) 启动程序1sudo /etc/init.d/redis_6379 start]]></content>
      <tags>
        <tag>CentOS Node PM2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[zookeeper常用命令]]></title>
    <url>%2F2017%2F11%2F03%2Fzookeeper%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[zookeeper 安装目录下有 zkCli工具（windows下 zkCli.cmd, linux 下 zkCli.sh）12./zkCli.sh # 连接本地 zookeeper./zkCli.sh -server 10.1.1.3:2181 # 连接远程zookeeper 以下命令均是在zkCli下输入。 ls查看节点1ls / 输出：1[zookeeper, hhh, xyz] ls2查看节点详细数据1ls2 / 输出：123456789101112[hhh, a, b, zookeeper, dubbo]cZxid = 0x0ctime = Thu Jan 01 08:00:00 CST 1970mZxid = 0x0mtime = Thu Jan 01 08:00:00 CST 1970pZxid = 0x1c0cversion = 9dataVersion = 0aclVersion = 0ephemeralOwner = 0x0dataLength = 0numChildren = 5 节点信息介绍1234567891011cZxid：节点创建时的zxidctime：节点创建时间mZxid： 节点最新一次更新发生时的zxidmtime： 节点最新一次更新发生时间pZxid： 0x198cversion： 其子节点的更新次数dataVersion： 节点数据的更新次数aclVersion： 节点ACL(授权信息)的更新次数ephemeralOwner： 如果该节点为ephemeral节点, ephemeralOwner值表示与该节点绑定的session id. 如果该节点不是ephemeral节点, ephemeralOwner值为0dataLength： 节点数据的字节数numChildren： 子节点个数 create创建节点， 其中-e 代表临时节点 -s代表持久节点 默认是-s。 12create -e /node data # 创建临时节点create -s /node data get获取节点数据 1get /node set更新节点数据 1set /node data delete删除节点 （子节点为空时会删除失败） 1delete /node rmr删除节点 （存在子节点仍能删除成功） 1rmr /node stat获取节点信息 1stat /node sync 12delete /harirmr /hari getAcl获取权限数据 1getAcl /dubbo 输出：12&apos;world,&apos;anyone: cdrwa 简单说ACL 和UGO（User，Group，Other）一样，都是权限控制的方式，acl字段分为 scheme:id:permission上面的权限模式是’world,’，授权对象ID是anyone，权限是cdrwa（create, delete, read, write, admin） setAcl 12345setAcl /node world:anyone:crdwasetAcl /newnode ip:127.0.0.1:crdwaaddauth digest user_abc:pwd_abc # 先添加auth信息setAcl /newnode digest:user_abc:pwd_abc:crdwa setquotasetquota ：设置子节点的个数（-n：子节点个数的限制，-b：数据数据节点数据长度的限制） 1setquota -n 3 /node delquota删除数据节点配额的情况 1delquota /node listquota查看数据节点配额的情况 1listquota /node sync 1sync /aa]]></content>
      <tags>
        <tag>zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ubuntu下zookeeper安装]]></title>
    <url>%2F2017%2F11%2F03%2Fubuntu%E4%B8%8Bzookeeper%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[1.下载zookeeper, 并解压123cd /optwget http://mirror.bit.edu.cn/apache/zookeeper/stable/zookeeper-3.4.10.tar.gztar -xvf zookeeper-3.4.10.tar.gz 2.创建数据文件1mkdir -p /data/zookeeper 3.创建配置文件12cd ./confmv zoo_sample.cfg zoo.cfg 4.设置数据文件目录, 更改zoo.cfg中配置：dataDir=/data/zookeeper 5.启动服务12cd ./bin./zkServer.sh start]]></content>
      <tags>
        <tag>zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nvm教程]]></title>
    <url>%2F2017%2F11%2F03%2Fnvm%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[下载 在地址 https://github.com/coreybutler/nvm-windows/releases找最新版本的nvm-setup.zip 下载 安装，一路next。 执行 nvm list available 查看所有可用版本 nvm install xx.xx.xx 安装指定版本 nvm list 查看当前可用版本 nvm use xx.xx.xx 使用指定版本 node –version 确认版本切换成功。 nvm uninstall xx.xx.xx 卸载指定版本]]></content>
      <tags>
        <tag>nvm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Express项目安全建议]]></title>
    <url>%2F2017%2F09%2F18%2FExpress%E9%A1%B9%E7%9B%AE%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%AE%2F</url>
    <content type="text"><![CDATA[参照文档 http://expressjs.com/zh-cn/advanced/best-practice-security.html 使用 HelmetHelmet 通过适当地设置 HTTP 头，帮助您保护应用程序避免一些众所周知的 Web 漏洞。 csp 用于设置 Content-Security-Policy 头，帮助抵御跨站点脚本编制攻击和其他跨站点注入攻击。 hidePoweredBy 用于移除 X-Powered-By 头。 hpkp 用于添加公用密钥固定头，防止以伪造证书进行的中间人攻击。 hsts 用于设置 Strict-Transport-Security 头，实施安全的服务器连接 (HTTP over SSL/TLS)。 ieNoOpen 用于为 IE8+ 设置 X-Download-Options。 noCache 用于设置 Cache-Control 和 Pragma 头，以禁用客户端高速缓存。 noSniff 用于设置 X-Content-Type-Options，以防止攻击者以 MIME 方式嗅探浏览器发出的响应中声明的 content-type。 frameguard 用于设置 X-Frame-Options 头，提供 clickjacking 保护。 xssFilter 用于设置 X-XSS-Protection，在最新的 Web 浏览器中启用跨站点脚本编制 (XSS) 过滤器。安装：1$ npm install --save helmet 使用：12var helmet = require(&apos;helmet&apos;);app.use(helmet()); 禁用 X-Powered-By 头如果使用 helmet.js，它会为自动屏蔽改header，没有使用的话，可以使用下面的代码禁用。 1app.disable(&apos;x-powered-by&apos;); 安全地使用 cookie需要更改session的name ，默认是 ‘connect.sid’ ，修改为sessionId 1234567var session = require(&apos;express-session&apos;);app.set(&apos;trust proxy&apos;, 1) // trust first proxyapp.use( session(&#123; secret : &apos;s3Cur3&apos;, name : &apos;sessionId&apos;, &#125;)); 检查依赖包的安全性 有两个工具可选，功能类似： nsp 和 requireSafe 12npm install -g nspnpm install -g requiresafe 使用nsp的话，命令为：1nsp audit-package 使用requiresafe的话，命令为：1requiresafe check]]></content>
  </entry>
  <entry>
    <title><![CDATA[Node项目ubuntu环境搭建简介]]></title>
    <url>%2F2017%2F09%2F18%2FNode%E9%A1%B9%E7%9B%AEubuntu%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[〇 查看ubuntu的版本执行命令：12345cat /proc/version # 查看内核版本uname -a # 查看内核版本cat /etc/issue # 方法一lsb_release -a # 方法二cat /etc/lsb-release # 方法三 12345sudo apt-get install python-software-propertiessudo apt-get install software-properties-commonsudo add-apt-repository ppa:rwky/graphicsmagicksudo apt-get updatesudo apt-get install graphicsmagick 一、服务器基环境的配置node环境安装 执行以下命令： 1curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash - 然后执行: 1apt-get install nodejs pm2安装pm2和forever是启动Nodejs服务常用到的两个工具。使用这两个指令可以使node服务在后台运行，另外它们可以在服务因异常或其他原因被杀掉后进行自动重启。当前项目选用pm2。1npm install -g pm2 NGINX的安装MongoDB的安装 导入公钥 1sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 0C49F3730359A14518585931BC711F9BA15703C6 创建list文件：12.04系统下： 1echo "deb [ arch=amd64 ] http://repo.mongodb.org/apt/ubuntu precise/mongodb-org/3.4 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list 14.04系统下 1echo "deb [ arch=amd64 ] http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.4 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list 16.04系统下 1echo "deb [ arch=amd64,arm64 ] http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.4 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list 更新本地包的数据 1sudo apt-get update 最后执行命令进行安装 1sudo apt-get install -y mongodb-org 启动mongod服务 1sudo service mongod start Redis的安装 下载解压文件 1234wget http://download.redis.io/redis-stable.tar.gztar xvzf redis-stable.tar.gzcd redis-stablemake 将运行文件安装到 /usr/bin 1make install 创建配置文件夹和数据文件夹 12sudo mkdir /etc/redissudo mkdir /var/redis 将编译目录下的脚本拷贝到init.d文件夹下 1sudo cp utils/redis_init_script /etc/init.d/redis_6379 拷贝配置文件 1sudo cp redis.conf /etc/redis/6379.conf 为redis创建一个数据和工作目录 1sudo mkdir /var/redis/6379 编辑/etc/redis/6379.conf 把参数 daemonize 设置为 yes (默认是 no). 设置 pidfile 为 /var/run/redis_6379.pid (可以根据需要改变端口). 如果有需要可以改变 port 参数. 默认6379. 设置 loglevel 参数为合适值. 设置 logfile 为 /var/log/redis_6379.log 设置 dir 为 /var/redis/6379 (此步骤很重要!) 执行命令： 1sudo update-rc.d redis_6379 defaults 启动程序 1sudo /etc/init.d/redis_6379 start]]></content>
  </entry>
  <entry>
    <title><![CDATA[Node项目CentOS环境搭建简介]]></title>
    <url>%2F2017%2F09%2F18%2FNode%E9%A1%B9%E7%9B%AECentOS%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[一、服务器基环境的配置以下的命令都建议切换到管理员身份运行：1sudo -i node环境安装 执行以下命令： 1curl --silent --location https://rpm.nodesource.com/setup_6.x | bash - 然后执行: 1yum -y install nodejs pm2安装pm2和forever是启动Nodejs服务常用到的两个工具。使用这两个指令可以使node服务在后台运行，另外它们可以在服务因异常或其他原因被杀掉后进行自动重启。当前项目选用pm2。1npm install -g pm2 NGINX的安装本安装针对于CentOS7的系统。首先需要添加nginx的源:1rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm 然后执行命令安装nginx：1yum -y install nginx 启动nginx服务1systemctl start nginx.service 配置与系统一起启动1systemctl enable nginx.service 修改配置,配置文件存放目录：12/etc/nginx/nginx.conf/etc/nginx/conf.d/*.conf 测试配置：1nginx -t -c /etc/nginx/nginx.conf 重启nginx1nginx -s reload 或者1service nginx restart CentOS7需要关闭selinux功能,否则端口转发时会出错编辑selinux文件1/etc/sysconfig/selinux 注释掉下面代码1#SELINUX=enforcing 将此行代码取消注释,修改后为:1SELINUX=disabled 设置 SELinux 状态1setenforce 0 执行命令,获取SELinux状态 1getenforce MongoDB的安装首先配置yum 1vi /etc/yum.repos.d/mongodb-org-3.0.repo 然后填入内容: 123456[mongodb-org-3.4]name=MongoDB Repositorybaseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.4/x86_64/gpgcheck=1enabled=1gpgkey=https://www.mongodb.org/static/pgp/server-3.4.asc 最后执行命令进行安装 1yum -y install mongodb-org 手动创建数据文件夹 1mkdir -p /data/db 启动mongod服务 1service mongod start Redis的安装首先检查环境123yum install -y gcc-c++yum install -y tclyum install -y wget 下载redis文件1wget http://download.redis.io/releases/redis-3.2.6.tar.gz 解压并编译123tar xzf redis-3.2.6.tar.gzcd redis-3.2.6make 如果出现错误 jemalloc/jemalloc.h: No such file or directory,则使用下面命令： 1make MALLOC=libc 将编译后的redis-server复制到/usr/bin 1cp src/redis-server /usr/bin/]]></content>
  </entry>
  <entry>
    <title><![CDATA[常用命令介绍]]></title>
    <url>%2F2017%2F09%2F18%2Fnpm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"></content>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Node项目常用库介绍]]></title>
    <url>%2F2017%2F09%2F18%2FNode%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%BA%93%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[nodemon concurrently同时运行几个任务的工具，类似于 npm run watch-js &amp; npm run watch-less配合参数 –kill-others 使用，代表一个任务失败的话其他任务也会被kill掉 PM2 tsc, tslint]]></content>
      <tags>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[node-sass安装不成功解决办法]]></title>
    <url>%2F2017%2F09%2F18%2Fnode-sass%E5%AE%89%E8%A3%85%E4%B8%8D%E6%88%90%E5%8A%9F%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%2F</url>
    <content type="text"><![CDATA[方法一、 设置国内的镜像windows下分两个命令执行12SET SASS_BINARY_SITE=https://npm.taobao.org/mirrors/node-sass/ # --设置环境变量npm install node-sass # 安装 linux下一个命令就可以了1SASS_BINARY_SITE=https://npm.taobao.org/mirrors/node-sass/ npm install node-sass 方法二、 利用代理12npm config set proxy http://127.0.0.1:1080npm install node-sass # 安装]]></content>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[angular-cli常用命令]]></title>
    <url>%2F2017%2F09%2F18%2Fangular-cli%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[NG常用命令ng help打印帮助信息 1ng help ng new创建新项目 12ng new PROJECT_NAMEng new sassy-project --style=sass #使用sass框架 ng serve启动服务 12ng serve #简单情况ng serve --host 0.0.0.0 --port 4201 --live-reload-port 49153 # 指定端口 ng generate简写 ng g ，用来生成angular2的组件，服务，接口等内容 名称 命令 Component ng g component my-new-component Directive ng g directive my-new-directive Pipe ng g pipe my-new-pipe Service ng g service my-new-service Class ng g class my-new-class Interface ng g interface my-new-interface Enum ng g enum my-new-enum Module ng g module my-module 12345678ng g component my-new-component ng g directive my-new-directiveng g pipe my-new-pipeng g service my-new-serviceng g class my-new-classng g interface my-new-interfaceng g enum my-new-enumng g module my-module 创建路由： 12ng new PROJECT_NAME --routing # 创建项目时就创建一个app-routing.module.ts文件ng g module my-module --routing # 创建模块时创建一个my-module-routing.module.ts文件 ng build构建项目 配置文件是angular-cli.json的文件 123456789# 以下语句等价ng build --target=production --environment=prodng build --prod --env=prodng build --prod# 以下语句等价ng build --target=development --environment=devng build --dev --e=devng build --devng build]]></content>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MongoDB的导入导出]]></title>
    <url>%2F2017%2F09%2F18%2FMongoDB%E7%9A%84%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%2F</url>
    <content type="text"><![CDATA[MongoDB的导入导出分为 文本导出 和 二进制导出，文本导出一次导出一个集合，方便与其他数据库交换数据，二进制导出的是MongoDB自己的格式，可以导出整个数据库，体积小，速度快。 文本导出mongoexport 导出表12345678910-h, --host=&lt;hostname&gt; 主机 --port=&lt;port&gt; 端口-u, --username=&lt;username&gt; 用户名-p, --password=&lt;passwd&gt; 密码-d, --db=&lt;database-name&gt; 数据库名称-c, --collection=&lt;collection-name&gt; 集合名称-f, --fields=&lt;field&gt;[,&lt;field&gt;]* 逗号分隔的字段名称 --type=&lt;type&gt; json或者csv，默认json--type=&lt;type&gt;-o, --out=&lt;filename&gt; 导出文件名称 举例： 导出adminusers集合1mongoexport -h localhost -d cloudminds -c adminusers -o ./adminusers.json mongoimport 导入数据12345678910-h, --host=&lt;hostname&gt; 主机 --port=&lt;port&gt; 端口-u, --username=&lt;username&gt; 用户名-p, --password=&lt;passwd&gt; 密码-d, --db=&lt;database-name&gt; 数据库名称-c, --collection=&lt;collection-name&gt; 集合名称-f, --fields=&lt;field&gt;[,&lt;field&gt;]* 逗号分隔的字段名称 --type=&lt;type&gt; json或者csv，默认json --out=&lt;filename&gt; 要导入的文件名称--type=&lt;type&gt; 举例1mongoimport -h localhost -d cloudminds -c adminusers --file ./adminusers.json 二进制导出mongodump 导出二进制bson结构的数据及其索引信息12345678-h, --host=&lt;hostname&gt; 主机 --port=&lt;port&gt; 端口-u, --username=&lt;username&gt; 用户名-p, --password=&lt;passwd&gt; 密码-d, --db=&lt;database-name&gt; 数据库名称-c, --collection=&lt;collection-name&gt; 集合名称 --type=&lt;type&gt;-o, --out=&lt;filename&gt; 导出文件名称 导出cloudminds数据库中的数据到文件 bak中 1mongodump -d cloudminds -o bak mongorestore 导入二进制文件导入备份文件bak中的数据 1mongorestore --drop bak]]></content>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PM2 随系统启动配置]]></title>
    <url>%2F2017%2F09%2F06%2FPM2-%E9%9A%8F%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[自动配置启动脚本 1pm2 startup 保存当前的进程信息（已启动的服务） 1pm2 save 手动的测试下保存是否有效 1pm2 resurrect 如果要取消，启动 1pm2 unstartup]]></content>
      <tags>
        <tag>PM2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[解决端口占用问题]]></title>
    <url>%2F2017%2F09%2F06%2F%E8%A7%A3%E5%86%B3%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[日常开发中经常会遇到端口占用的问题，以下简单记录下解决方案。 Windows 系统查看占用指定端口的程序 进程ID1netstat -ano|findstr &quot;8080&quot; 找到进程号对应的进程名称1tasklist|findstr 3112 可以使用进程管理杀死进程，也可以使用命令工具1taskkill /f /t /im /javaw.exe Linux 系统查看占用指定端口的程序 进程ID1netstat -apn|grep 8080 找到进程号对应的进程名称1ps -aux|grep 5566 1kill 5566]]></content>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
</search>
